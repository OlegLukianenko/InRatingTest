// Generated by Dagger (https://google.github.io/dagger).
package inratind.test.application.data.repository;

import dagger.MembersInjector;
import inratind.test.application.data.retrofit.APIError;
import inratind.test.application.data.retrofit.ServerApi;
import javax.inject.Provider;
import okhttp3.ResponseBody;
import retrofit2.Converter;
import retrofit2.Retrofit;

public final class RepositoryImpl_MembersInjector implements MembersInjector<RepositoryImpl> {
  private final Provider<ServerApi> serverApiProvider;

  private final Provider<Retrofit> retrofitProvider;

  private final Provider<Converter<ResponseBody, APIError>> converterProvider;

  public RepositoryImpl_MembersInjector(
      Provider<ServerApi> serverApiProvider,
      Provider<Retrofit> retrofitProvider,
      Provider<Converter<ResponseBody, APIError>> converterProvider) {
    this.serverApiProvider = serverApiProvider;
    this.retrofitProvider = retrofitProvider;
    this.converterProvider = converterProvider;
  }

  public static MembersInjector<RepositoryImpl> create(
      Provider<ServerApi> serverApiProvider,
      Provider<Retrofit> retrofitProvider,
      Provider<Converter<ResponseBody, APIError>> converterProvider) {
    return new RepositoryImpl_MembersInjector(
        serverApiProvider, retrofitProvider, converterProvider);
  }

  @Override
  public void injectMembers(RepositoryImpl instance) {
    injectServerApi(instance, serverApiProvider.get());
    injectRetrofit(instance, retrofitProvider.get());
    injectConverter(instance, converterProvider.get());
  }

  public static void injectServerApi(RepositoryImpl instance, ServerApi serverApi) {
    instance.serverApi = serverApi;
  }

  public static void injectRetrofit(RepositoryImpl instance, Retrofit retrofit) {
    instance.retrofit = retrofit;
  }

  public static void injectConverter(
      RepositoryImpl instance, Converter<ResponseBody, APIError> converter) {
    instance.converter = converter;
  }
}
