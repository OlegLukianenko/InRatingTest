// Generated by Dagger (https://google.github.io/dagger).
package inratind.test.application.di.app;

import android.app.Activity;
import android.arch.lifecycle.ViewModelProvider;
import android.content.SharedPreferences;
import android.support.v4.app.Fragment;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import inratind.test.application.app.App;
import inratind.test.application.app.App_MembersInjector;
import inratind.test.application.app.home.MainActivity;
import inratind.test.application.app.home.MainActivity_MembersInjector;
import inratind.test.application.app.home.StatisticsPostFragment;
import inratind.test.application.app.home.StatisticsPostFragment_MembersInjector;
import inratind.test.application.app.splash.SplashActivity;
import inratind.test.application.app.splash.SplashActivity_MembersInjector;
import inratind.test.application.data.repository.RepositoryApi;
import inratind.test.application.data.repository.RepositoryImpl_Factory;
import inratind.test.application.data.retrofit.APIError;
import inratind.test.application.data.retrofit.ServerApi;
import inratind.test.application.di.home.mainActivity.MainActivityComponent;
import inratind.test.application.di.home.statisticsPost.StatisticsPostFragmentComponent;
import inratind.test.application.di.home.statisticsPost.StatisticsPostFragmentModule;
import inratind.test.application.di.home.statisticsPost.StatisticsPostFragmentModule_ProvideCommentatorsAdapterFactory;
import inratind.test.application.di.home.statisticsPost.StatisticsPostFragmentModule_ProvideMentionsRecyclerAdapterFactory;
import inratind.test.application.di.home.statisticsPost.StatisticsPostFragmentModule_ProvideUserAdapterFactory;
import inratind.test.application.di.home.statisticsPost.StatisticsPostFragmentModule_ProvideViewModelFactory;
import inratind.test.application.di.splash.SplashActivityComponent;
import inratind.test.application.di.splash.SplashModule;
import inratind.test.application.di.splash.SplashModule_ProvideSplashViewModelFactory;
import inratind.test.application.di.viewmodel.ViewModelComponent;
import inratind.test.application.utils.NetworkHelper;
import inratind.test.application.viewmodel.SplashActivityViewModel;
import inratind.test.application.viewmodel.SplashActivityViewModel_Factory;
import inratind.test.application.viewmodel.SplashActivityViewModel_MembersInjector;
import inratind.test.application.viewmodel.StatisticsPostFragmentViewModel;
import inratind.test.application.viewmodel.StatisticsPostFragmentViewModel_Factory;
import inratind.test.application.viewmodel.StatisticsPostFragmentViewModel_MembersInjector;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;
import retrofit2.Converter;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<SplashActivityComponent.Builder> splashActivityComponentBuilderProvider;

  private Provider<MainActivityComponent.Builder> mainActivityComponentBuilderProvider;

  private Provider<ViewModelComponent.Builder> viewModelComponentBuilderProvider;

  private Provider<ViewModelProvider.Factory> provideViewModelFactoryProvider;

  private Provider<App> applicationProvider;

  private Provider<NetworkHelper> provideNetworkHelperProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<OkHttpClient> getOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ServerApi> getServerApiProvider;

  private Provider<Converter<ResponseBody, APIError>> provideRetrofitConverterProvider;

  private RepositoryImpl_Factory repositoryImplProvider;

  private Provider<RepositoryApi> provideServerApiProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(SplashActivity.class, (Provider) splashActivityComponentBuilderProvider)
        .put(MainActivity.class, (Provider) mainActivityComponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.splashActivityComponentBuilderProvider =
        new Provider<SplashActivityComponent.Builder>() {
          @Override
          public SplashActivityComponent.Builder get() {
            return new SplashActivityComponentBuilder();
          }
        };
    this.mainActivityComponentBuilderProvider =
        new Provider<MainActivityComponent.Builder>() {
          @Override
          public MainActivityComponent.Builder get() {
            return new MainActivityComponentBuilder();
          }
        };
    this.viewModelComponentBuilderProvider =
        new Provider<ViewModelComponent.Builder>() {
          @Override
          public ViewModelComponent.Builder get() {
            return new ViewModelComponentBuilder();
          }
        };
    this.provideViewModelFactoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideViewModelFactoryFactory.create(
                builder.appModule, viewModelComponentBuilderProvider));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideNetworkHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvideNetworkHelperFactory.create(builder.appModule, applicationProvider));
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            AppModule_ProvideSharedPreferencesFactory.create(
                builder.appModule, applicationProvider));
    this.getOkHttpClientProvider =
        DoubleCheck.provider(DataModule_GetOkHttpClientFactory.create(builder.dataModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            DataModule_ProvideRetrofitFactory.create(builder.dataModule, getOkHttpClientProvider));
    this.getServerApiProvider =
        DoubleCheck.provider(
            DataModule_GetServerApiFactory.create(builder.dataModule, provideRetrofitProvider));
    this.provideRetrofitConverterProvider =
        DoubleCheck.provider(
            DataModule_ProvideRetrofitConverterFactory.create(
                builder.dataModule, provideRetrofitProvider));
    this.repositoryImplProvider =
        RepositoryImpl_Factory.create(
            getServerApiProvider, provideRetrofitProvider, provideRetrofitConverterProvider);
    this.provideServerApiProvider = DoubleCheck.provider((Provider) repositoryImplProvider);
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectActivityInjector(instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private DataModule dataModule;

    private App application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (application == null) {
        throw new IllegalStateException(App.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(App app) {
      this.application = Preconditions.checkNotNull(app);
      return this;
    }
  }

  private final class SplashActivityComponentBuilder extends SplashActivityComponent.Builder {
    private SplashModule splashModule;

    private SplashActivity seedInstance;

    @Override
    public SplashActivityComponent build() {
      if (splashModule == null) {
        this.splashModule = new SplashModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(SplashActivity.class.getCanonicalName() + " must be set");
      }
      return new SplashActivityComponentImpl(this);
    }

    @Override
    public void seedInstance(SplashActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SplashActivityComponentImpl implements SplashActivityComponent {
    private SplashModule splashModule;

    private SplashActivity seedInstance;

    private SplashActivityComponentImpl(SplashActivityComponentBuilder builder) {
      initialize(builder);
    }

    private SplashActivityViewModel getSplashActivityViewModel() {
      return SplashModule_ProvideSplashViewModelFactory.proxyProvideSplashViewModel(
          splashModule,
          seedInstance,
          DaggerAppComponent.this.provideViewModelFactoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SplashActivityComponentBuilder builder) {
      this.splashModule = builder.splashModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      SplashActivity_MembersInjector.injectViewModel(instance, getSplashActivityViewModel());
      SplashActivity_MembersInjector.injectNetworkHelper(
          instance, DaggerAppComponent.this.provideNetworkHelperProvider.get());
      SplashActivity_MembersInjector.injectSharedPreferences(
          instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      return instance;
    }
  }

  private final class MainActivityComponentBuilder extends MainActivityComponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainActivityComponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivityComponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivityComponentImpl implements MainActivityComponent {
    private Provider<StatisticsPostFragmentComponent.Builder>
        statisticsPostFragmentComponentBuilderProvider;

    private MainActivityComponentImpl(MainActivityComponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return Collections
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              singletonMap(
                  StatisticsPostFragment.class,
                  (Provider) statisticsPostFragmentComponentBuilderProvider);
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivityComponentBuilder builder) {
      this.statisticsPostFragmentComponentBuilderProvider =
          new Provider<StatisticsPostFragmentComponent.Builder>() {
            @Override
            public StatisticsPostFragmentComponent.Builder get() {
              return new StatisticsPostFragmentComponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class StatisticsPostFragmentComponentBuilder
        extends StatisticsPostFragmentComponent.Builder {
      private StatisticsPostFragmentModule statisticsPostFragmentModule;

      private StatisticsPostFragment seedInstance;

      @Override
      public StatisticsPostFragmentComponent build() {
        if (statisticsPostFragmentModule == null) {
          this.statisticsPostFragmentModule = new StatisticsPostFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              StatisticsPostFragment.class.getCanonicalName() + " must be set");
        }
        return new StatisticsPostFragmentComponentImpl(this);
      }

      @Override
      public void seedInstance(StatisticsPostFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class StatisticsPostFragmentComponentImpl
        implements StatisticsPostFragmentComponent {
      private StatisticsPostFragmentModule statisticsPostFragmentModule;

      private StatisticsPostFragment seedInstance;

      private StatisticsPostFragmentComponentImpl(StatisticsPostFragmentComponentBuilder builder) {
        initialize(builder);
      }

      private StatisticsPostFragmentViewModel getStatisticsPostFragmentViewModel() {
        return StatisticsPostFragmentModule_ProvideViewModelFactory.proxyProvideViewModel(
            statisticsPostFragmentModule,
            seedInstance,
            DaggerAppComponent.this.provideViewModelFactoryProvider.get());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final StatisticsPostFragmentComponentBuilder builder) {
        this.statisticsPostFragmentModule = builder.statisticsPostFragmentModule;
        this.seedInstance = builder.seedInstance;
      }

      @Override
      public void inject(StatisticsPostFragment arg0) {
        injectStatisticsPostFragment(arg0);
      }

      private StatisticsPostFragment injectStatisticsPostFragment(StatisticsPostFragment instance) {
        StatisticsPostFragment_MembersInjector.injectViewModel(
            instance, getStatisticsPostFragmentViewModel());
        StatisticsPostFragment_MembersInjector.injectNetworkHelper(
            instance, DaggerAppComponent.this.provideNetworkHelperProvider.get());
        StatisticsPostFragment_MembersInjector.injectUserRecyclerAdapter(
            instance,
            StatisticsPostFragmentModule_ProvideUserAdapterFactory.proxyProvideUserAdapter(
                statisticsPostFragmentModule));
        StatisticsPostFragment_MembersInjector.injectCommentatorsRecyclerAdapter(
            instance,
            StatisticsPostFragmentModule_ProvideCommentatorsAdapterFactory
                .proxyProvideCommentatorsAdapter(statisticsPostFragmentModule));
        StatisticsPostFragment_MembersInjector.injectMentionsRecyclerAdapter(
            instance,
            StatisticsPostFragmentModule_ProvideMentionsRecyclerAdapterFactory
                .proxyProvideMentionsRecyclerAdapter(statisticsPostFragmentModule));
        return instance;
      }
    }
  }

  private final class ViewModelComponentBuilder implements ViewModelComponent.Builder {
    @Override
    public ViewModelComponent build() {
      return new ViewModelComponentImpl(this);
    }
  }

  private final class ViewModelComponentImpl implements ViewModelComponent {
    private ViewModelComponentImpl(ViewModelComponentBuilder builder) {}

    @Override
    public SplashActivityViewModel splashActivityViewModel() {
      return injectSplashActivityViewModel(
          SplashActivityViewModel_Factory.newSplashActivityViewModel());
    }

    @Override
    public StatisticsPostFragmentViewModel statisticsPostFragmentViewModel() {
      return injectStatisticsPostFragmentViewModel(
          StatisticsPostFragmentViewModel_Factory.newStatisticsPostFragmentViewModel());
    }

    private SplashActivityViewModel injectSplashActivityViewModel(
        SplashActivityViewModel instance) {
      SplashActivityViewModel_MembersInjector.injectRepositoryApi(
          instance, DaggerAppComponent.this.provideServerApiProvider.get());
      return instance;
    }

    private StatisticsPostFragmentViewModel injectStatisticsPostFragmentViewModel(
        StatisticsPostFragmentViewModel instance) {
      StatisticsPostFragmentViewModel_MembersInjector.injectRepositoryApi(
          instance, DaggerAppComponent.this.provideServerApiProvider.get());
      return instance;
    }
  }
}
